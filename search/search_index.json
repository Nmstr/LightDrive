{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lightdrive","title":"LightDrive","text":"<p>LightDrive is a lighting control system for dmx lights. It is designed to be easy to use and to be able to control a large number of lights.</p> <p>Warning</p> <p>LightDrive is currently under heavy development.</p>"},{"location":"#features","title":"Features","text":"<p>Warning</p> <p>Not all features are implemented yet. Some listed features may not be available in the current version, but are planned for future releases. See the README in the GitHub repository for the current state of the project.</p> <ul> <li>Large selection of pre-defined fixtures</li> <li>Create your own fixtures</li> </ul> <ul> <li>Virtual lighting console</li> <li>Wide variety of available snippets</li> <li>Automatic sound triggers</li> <li>Fully timed light shows</li> </ul> <ul> <li>Support for ILDA Lasers</li> <li>ILDA support in normal shows</li> </ul> <ul> <li>Powerful Visualizer</li> <li>Fully Scriptable</li> <li>Open Source</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions of all kinds are always welcome. Detailed information on how to contribute can be found here or in the GitHub repository.</p>"},{"location":"contributing/","title":"Contributing to LightDrive","text":"<p>Contributions of all kinds are welcome. Feature additions/requests, bug fixes/reports or documentation should be contributed via issues and/or pull requests.</p>"},{"location":"contributing/#contributing-code","title":"Contributing code","text":"<p>You should follow already established conventions. All code should be tested before commiting/pulling. In the commits and in pull requests you should clearly state what you are changing. All pull requests should have a reasonable size.</p>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>Please use the pre-made issue template and fill out everything possible. Images should be uploaded to GitHub and not third-party file hosting sites. If necessary, add the images to a tar or zip archive. Provide as many details as you can. These should include:</p> <ul> <li>What did you do?</li> <li>What did you expect to happen?</li> <li>What actually happened?</li> <li>What versions of LightDrive did you use?</li> <li>Anything else that might be important.</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature requests","text":"<p>Please use the pre-made template for feature requests. As above, images should be uploaded to GitHub directly. A detailed description of the feature is required, which should include:</p> <ul> <li>Is it related to a problem? If so, which?</li> <li>Clearly describe the solution.</li> <li>Describe alternatives you've considered.</li> <li>Provide more context about the feature in question.</li> </ul>"},{"location":"lightdrive/","title":"WIP","text":"<p>WIP</p>"},{"location":"visualizer/","title":"WIP","text":"<p>WIP</p>"},{"location":"other/file_formats/","title":"File Formats","text":"<p>LightDrive utilizes a few different file formats to store application data. Every format is explained in detail on their own page. The following formats are used:</p> <ul> <li>LightDrive Workspace Files (.ldw)</li> </ul> <p>These files contain all workspace data including fixtures, universes, snippets, the desk and more.</p> <ul> <li>LightDrive Fixture Files (.json)</li> </ul> <p>These files contain fixture definition used to create fixtures in the workspace.</p> <ul> <li>LightDrive Stage Files (.lds)</li> </ul> <p>These files store stages for the Visualizer. They contain all relevant data for the stage to properly function.</p> <ul> <li>LightDrive Visualizer Files (.ldvf)</li> </ul> <p>These files contain fixture definitions for the Visualizer. They are used to create fixtures for the Visualizer.</p> <ul> <li>LightDrive Visualizer Stage Model Files (.ldvm)</li> </ul> <p>These files include stage models for the Visualizer. They contain 3D models for stages.</p>"},{"location":"other/fixture_file/","title":"LightDrive Fixture Files (.json)","text":"<p>Warning</p> <p>Fixture files will be fully overhauled in the near future. The current format is not final and will change.</p> <p>LightDrive fixture files are used to store fixture definitions. These definitions are used to create fixtures in the workspace.</p>"},{"location":"other/stage_file/","title":"LightDrive Visualizer Stage Files (.lds)","text":"<p>These files store stages for the Visualizer in JSON Format. They contain the stage model, the fixtures and all universes.</p> <p>Warning</p> <p>Visualizer Stage Files do not currently store the stage model and fixtures, but just references them. To share a stage, you need to share the stage model and fixtures as well and have them in the same location. This will change in the future.</p>"},{"location":"other/visualizer_fixture_file/","title":"LightDrive Visualizer Fixture Files (.ldvf)","text":"<p>LightDrive Visualizer fixture files are used to store fixture definitions for the Visualizer. These definitions are used to create fixtures in the Visualizer. They contain the model and configuration of the fixture, as well as a thumbnail.</p>"},{"location":"other/visualizer_fixture_file/#file-structure","title":"File Structure","text":"<p>Under the hood, .ldvf files are zip archives. They contain a directory and a few files. They follow this structure: <pre><code>fixture_name.ldvf\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 model.glb\n\u2514\u2500\u2500 thumbnail.png\n</code></pre></p>"},{"location":"other/visualizer_fixture_file/#configjson","title":"config.json","text":"<p>This file includes the configuration of the fixture. The <code>min_pan_angle</code> and <code>max_pan_angle</code> properties control the minimum and maximum pan angle of the fixture. The <code>min_tilt_angle</code> and <code>max_tilt_angle</code> properties control the minimum and maximum tilt angle of the fixture.</p> <p>The <code>light_sources</code> array contains all light sources  of the fixture. Each light source is an object with the following properties: <code>x_offset</code>, <code>y_offset</code>, <code>z_offset</code>, <code>angle</code>, <code>length</code>, <code>x_rotation</code>, <code>y_rotation</code>, <code>z_rotation</code> and <code>mode</code>. Each light source will be added to the fixture in the visualizer separately.</p> <p>The <code>channels</code> object contains all channels of the fixture. The key is the channel number and the value is an object specifying the type of the channel and some type specific options. The type can be one of the following:</p> <ul> <li>pan</li> </ul> <p>Pans the fixture by rotating the PanPivot. The pan angle is controlled by the value of the channel.</p> <ul> <li>tilt</li> </ul> <p>Tilts the fixture by rotating the TiltPivot. The tilt angle is controlled by the value of the channel.</p> <ul> <li>rgb</li> </ul> <p>Controls the RGB color of one or multiple light sources. It has a <code>color</code> property which specifies the color to change. Possible colors are <code>red</code>, <code>green</code> and <code>blue</code>. It then sets the intensity of the color to the value of the channel. The <code>light_sources</code> array specifies which light sources to control with this channel. The array contains the indices of the light sources in the <code>light_sources</code> array of the fixture. These light_sources must have their mode set to <code>rgb</code>, otherwise they will be ignored.</p> <p>An example <code>config.json</code> file: <pre><code>{\n  \"min_pan_angle\": 0.0,\n  \"min_tilt_angle\": -135.0,\n  \"max_pan_angle\": 540.0,\n  \"max_tilt_angle\": 270.0,\n  \"light_sources\": [\n    {\n      \"x_offset\": 0.0,\n      \"y_offset\": 0.5,\n      \"z_offset\": 0.0,\n      \"angle\": 5.0,\n      \"length\": 10.0,\n      \"x_rotation\": 0.0,\n      \"y_rotation\": 0.0,\n      \"z_rotation\": 0.0,\n      \"mode\": \"rgb\"\n    }\n  ],\n  \"channels\": {\n    \"1\": {\"type\": \"pan\"},\n    \"2\": {\"type\": \"tilt\"},\n    \"3\": {\"type\": \"rgb\", \"color\": \"red\", \"light_sources\": [0]},\n    \"4\": {\"type\": \"rgb\", \"color\": \"green\", \"light_sources\": [0]},\n    \"5\": {\"type\": \"rgb\", \"color\": \"blue\", \"light_sources\": [0]}\n  }\n}\n</code></pre></p>"},{"location":"other/visualizer_fixture_file/#modelglb","title":"model.glb","text":"<p>This file contains the 3D model of the fixture. It is a GLB file, which is a binary form of the glTF  file format. The model is used to display the fixture in the Visualizer.</p> <p>Tip</p> <p>The model should be centered around the origin (0, 0, 0) for rotation to properly work. The built-in fixture files can be viewed as an example and guideline for when creating your own.</p>"},{"location":"other/visualizer_fixture_file/#thumbnailpng","title":"thumbnail.png","text":"<p>This file is used to show a preview of the fixture before it is added to the stage. It may be any size, but is recommended to be square and at least 256x256 pixels.</p>"},{"location":"other/visualizer_stage_model_file/","title":"LightDrive Visualizer Stage Model Files (.ldvm)","text":"<p>These files store 3D models for stages in the Visualizer.</p>"},{"location":"other/visualizer_stage_model_file/#file-structure","title":"File Structure","text":"<p>Under the hood, .ldvm files are zip archives. They contain a directory and a few files. They follow this structure: <pre><code>fixture_name.ldvf\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 model.glb\n\u2514\u2500\u2500 thumbnail.png\n</code></pre></p>"},{"location":"other/visualizer_stage_model_file/#configjson","title":"config.json","text":"<p>These files include the configuration of the stage model. The <code>objects</code> property should contain all objects that are also in the model.json. Each object can have a <code>color</code> property, which sets the color of the object. They should also have a <code>surface_overrides</code> property, which is an array of surface indices and colors. The colors are in hexadecimal format. They override the color of the surface with the given index. The <code>initial_camera_position</code> property is an array of three numbers, which represent the initial camera position in the 3D space. The camera will be placed at this position when the model is loaded. This needs to be properly set for VR support.</p> <p>An example config.json file: <pre><code>{\n  \"objects\": {\n    \"Body\": {\n      \"color\": \"#363D4A\",\n      \"surface_overrides\": {\n        \"0\": \"#FF0000\",\n        \"1\": \"#FF0000\",\n        \"2\": \"#FF0000\",\n        \"3\": \"#FF0000\"\n      }\n    }\n  },\n  \"initial_camera_position\": [0.0, 1.0, 0.0]\n}\n</code></pre></p>"},{"location":"other/visualizer_stage_model_file/#modelglb","title":"model.glb","text":"<p>This file contains the 3D model of the stage. It is a GLB file. This model is the actual model that gets rendered in the Visualizer.</p> <p>Tip</p> <p>The model should not cover (0, 0, 0) so that fixtures fo not appear inside the model, as then they might become inaccessible. The built-in stage model files can be viewed as an example and guideline for when creating your own.</p>"},{"location":"other/visualizer_stage_model_file/#thumbnailpng","title":"thumbnail.png","text":"<p>This file is used to show a preview of the stage model before it is added to the stage. It may be any size, but it is recommended to be square.</p>"},{"location":"other/workspace_file/","title":"LightDrive Workspace Files (.ldw)","text":"<p>LightDrive workspace files are used to store all workspace data. This includes fixtures, universes, snippets, the desk and more.</p> <p>They contain all relevant data in themselves and can thus easily be shared between systems and users.</p>"},{"location":"other/workspace_file/#file-structure","title":"File Structure","text":"<p>Workspace files are simply tar archives under the hood. They contain a directory and a few files. They follow this structure: <pre><code>workspace_name.ldw\n\u251c\u2500\u2500 desk_configuration.json\n\u251c\u2500\u2500 dmx_output_configuration.json\n\u251c\u2500\u2500 fixtures.json\n\u2514\u2500\u2500 snippets\n    \u251c\u2500\u2500 snippet_name-snippet_uuid.json\n    \u251c\u2500\u2500 snippet_name-snippet_uuid.json\n    \u2514\u2500\u2500 snippet_name-snippet_uuid.json\n</code></pre></p> <p><code>desk_configuration.json</code> contains the configuration of the desk. This includes the buttons, faders, knobs,  labels and all other desk elements and their configuration.</p> <p><code>dmx_output_configuration.json</code> contains the universe configuration. This includes the universe names and their configuration.</p> <p><code>fixtures.json</code> contains all fixtures in the workspace.</p> <p><code>snippets</code> is a directory containing all snippets in the workspace. Each snippet is stored in its own file. The snippets are stored in JSON format. The file name is the snippet name followed by a dash and the snippet UUID. These files store all data relevant to the snippet.</p>"}]}